{
    "docs": [
        {
            "location": "/", 
            "text": "ApacheExpress\n\n\nApacheExpress\n\nis a way to rapidly write reliable and feature rich web applications\nin the \nSwift\n programming language.\nWithout ever leaving Xcode, or using the Swift Package Manager environment\non Linux.\n\nApacheExpress\n applications run directly within the \n\nApache WebServer\n,\nas native Apache modules - without any interpreters or proxies.\n\n\nServer Side Swift the right way.\n\n\nApacheExpress can be used alongside any other Apache module and hence can\nexploit the proven functionality of Apache.\nThis includes pretty much any kind of authentication mechanism you can think of,\nrate limiting / anti-DoS modules, or\nmod_ssl to secure the web application as well as mod_h2 to provide\n\nHTTP/2 support\n. \nThe latter are preconfigured when running ApacheExpress\nmodules and provide full HTTP/2 access out of the box.\n\n\nSimple Example\n\n\nDeveloping ApacheExpress applications use a Swift version of the mechanisms and\nAPIs used by the \nExpress\n framework.\nHence its name. Example:\n\n\nlet app = apache.express(cookieParser(), session())\n\napp.get(\n/express/cookies\n) { req, res, _ in\n  try res.json(req.cookies)\n}\n\napp.get(\n/express/\n) { req, res, _ in\n  let values = [\n    \nviewCount\n   : req.session[\nviewCount\n] ?? 0,\n    \ncowOfTheDay\n : cows.vaca()\n  ]\n  try res.render(\nindex\n, values)\n}\n\n\n\n\nIt grabs the application object representing the module,\nconfigures two builtin middleware objects (\ncookieParser\n, \nsession\n)\nand then registers two \nroutes\n.\nThe middleware attached to the \n/express/cookies\n route simply extracts all\nHTTP cookies set in the request and returns them as JSON.\nThe other sets up a dictionary which is then rendered using a \n\nMustache template\n.\n\n\nDatabase Access\n\n\nTo provide access to a collection of SQL databases, including PostgreSQL and\nSQLite3, ApacheExpress uses the Apache \nmod_dbd\n module.\nApache is used to configure the database connection and Apache is maintaining\nthe database connection pool.\n\n\nApacheExpress then provides the \nmod_dbd\n middleware,\nwhich stacks the powerful \nZeeQL\n database access framework\non top of Apache's module.\n\n\nWORK IN PROGRESS, STAY TUNED\n\n\nApacheExpress is still being prepared. Please stay tuned for the release.\nIf you want to stay up to date, subscribe to the blog\non: \napacheexpress.io/blog/\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#apacheexpress", 
            "text": "ApacheExpress \nis a way to rapidly write reliable and feature rich web applications\nin the  Swift  programming language.\nWithout ever leaving Xcode, or using the Swift Package Manager environment\non Linux. ApacheExpress  applications run directly within the  Apache WebServer ,\nas native Apache modules - without any interpreters or proxies.  Server Side Swift the right way.  ApacheExpress can be used alongside any other Apache module and hence can\nexploit the proven functionality of Apache.\nThis includes pretty much any kind of authentication mechanism you can think of,\nrate limiting / anti-DoS modules, or\nmod_ssl to secure the web application as well as mod_h2 to provide HTTP/2 support . \nThe latter are preconfigured when running ApacheExpress\nmodules and provide full HTTP/2 access out of the box.", 
            "title": "ApacheExpress"
        }, 
        {
            "location": "/#simple-example", 
            "text": "Developing ApacheExpress applications use a Swift version of the mechanisms and\nAPIs used by the  Express  framework.\nHence its name. Example:  let app = apache.express(cookieParser(), session())\n\napp.get( /express/cookies ) { req, res, _ in\n  try res.json(req.cookies)\n}\n\napp.get( /express/ ) { req, res, _ in\n  let values = [\n     viewCount    : req.session[ viewCount ] ?? 0,\n     cowOfTheDay  : cows.vaca()\n  ]\n  try res.render( index , values)\n}  It grabs the application object representing the module,\nconfigures two builtin middleware objects ( cookieParser ,  session )\nand then registers two  routes .\nThe middleware attached to the  /express/cookies  route simply extracts all\nHTTP cookies set in the request and returns them as JSON.\nThe other sets up a dictionary which is then rendered using a  Mustache template .", 
            "title": "Simple Example"
        }, 
        {
            "location": "/#database-access", 
            "text": "To provide access to a collection of SQL databases, including PostgreSQL and\nSQLite3, ApacheExpress uses the Apache  mod_dbd  module.\nApache is used to configure the database connection and Apache is maintaining\nthe database connection pool.  ApacheExpress then provides the  mod_dbd  middleware,\nwhich stacks the powerful  ZeeQL  database access framework\non top of Apache's module.", 
            "title": "Database Access"
        }, 
        {
            "location": "/#work-in-progress-stay-tuned", 
            "text": "ApacheExpress is still being prepared. Please stay tuned for the release.\nIf you want to stay up to date, subscribe to the blog\non:  apacheexpress.io/blog/ .", 
            "title": "WORK IN PROGRESS, STAY TUNED"
        }, 
        {
            "location": "/install/", 
            "text": "Installation\n\n\nApacheExpress should install fine on pretty much any Unix system that can run\nSwift and Apache 2.4. Including exotic setups like Raspberry Pi systems.\n\n\nWe also provide a macOS Homebrew tap which makes it really easy to install\nApacheExpress and its dependencies on macOS. We highly recommend that over a\ncustom install.\n\n\nOn the Linux side we test w/ Ubuntu Trusty and Xenial, though it should work\npretty much anywhere.\n\n\nInstall on macOS using Homebrew\n\n\nGot no Homebrew? \nGet it!\n\n\nBefore installing ApacheExpress and mod_swift, it is strongly recommended that\nthe Homebrew Apache 2.4 with HTTP/2 and the MPM event module is (re)installed:\n\n\nbrew tap homebrew/apache\nbrew reinstall httpd24 --with-mpm-event --with-http2\n\n\n\nThe \n--with-privileged-ports\n option can be added if such are desired.\n\n\nIf PostgreSQL access is needed:\n\n\nbrew reinstall apr-util --with-sqlite --with-postgresql\n\n\n\nAn optional \n--with-openldap\n enables LDAP support.\n\n\nThen add the mod_swift tap and install ApacheExpress:\n\n\nbrew tap modswift/mod_swift\nbrew install apacheexpress\n\n\n\n(yes, the account is just modswift w/o underscore due to GitHub limitations)\n\n\nInstall on Linux (or macOS w/o Homebrew)\n\n\nOn macOS: We strongly advise that you rather use Homebrew, more importantly\n          the Apache provided by Homebrew.\n\n\nUbuntu packages required (assuming you have Swift 3 installed already), this includes\nthe PostgreSQL and SQLite3 database adaptors, add additional ones as desired:\n\n\nsudo apt-get update\nsudo apt-get install \\\n   curl pkg-config libapr1-dev libaprutil1-dev \\\n   libxml2 apache2 apache2-dev \\\n   libnghttp2-dev \\\n   libaprutil1-dbd-sqlite3 \\\n   libaprutil1-dbd-pgsql\n\n\n\nInstall mod_swift:\n\n\ncurl -L -o mod_swift.tgz \\\n     https://github.com/modswift/mod_swift/archive/0.8.5.tar.gz\ntar zxf mod_swift.tgz \n cd mod_swift-0.8.5\nmake\nsudo make install\n\n\n\nInstall ApacheExpress:\n\n\n\n\nWORK IN PROGRESS, STAY TUNED\n\n\n\n\ncurl -L -o apacheexpress.tgz \\\n     https://github.com/ApacheExpress/ApacheExpress/archive/TODO.tar.gz\ntar zxf apacheexpress.tgz \n cd apacheexpress-TODO\nmake debug=yes\nmake debug=no\nsudo make debug=yes install\nsudo make debug=no  install\n\n\n\nThose put things into \n/usr/local\n. If you want to have it in \n/usr\n, do:\n\n\nsudo make prefix=/usr install\n\n\n\nCheck whether the installation is OK\n\n\nYou can call \nswift apache validate\n to make sure the Apache installation is OK:\n\n\n$ swift apache validate\nThe Swift Apache build environment looks sound.\n\nsrcroot:   /Users/helge/dev/Swift/Apex3\nmodule:    mods_Apex3\nconfig:    debug\nproduct:   /Users/helge/dev/Swift/Apex3/.build/mods_Apex3.so\napxs:      /usr/local/bin/apxs\nmod_swift: /usr/local\nswift:     3.1.0\ncert:      self-signed-mod_swift-localhost-server.crt\nhttp/2:    yes\n\n\n\nTroubleshooting\n\n\nIf something isn't working in a Homebrew setup, check whether:\n\n\nbrew doctor\n\n\n\noutputs anything unusual.\n\n\nIf you need any help, feel free to ask on the\n\nMailing List\n\nor our\n\nSlack channel\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#installation", 
            "text": "ApacheExpress should install fine on pretty much any Unix system that can run\nSwift and Apache 2.4. Including exotic setups like Raspberry Pi systems.  We also provide a macOS Homebrew tap which makes it really easy to install\nApacheExpress and its dependencies on macOS. We highly recommend that over a\ncustom install.  On the Linux side we test w/ Ubuntu Trusty and Xenial, though it should work\npretty much anywhere.", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#install-on-macos-using-homebrew", 
            "text": "Got no Homebrew?  Get it!  Before installing ApacheExpress and mod_swift, it is strongly recommended that\nthe Homebrew Apache 2.4 with HTTP/2 and the MPM event module is (re)installed:  brew tap homebrew/apache\nbrew reinstall httpd24 --with-mpm-event --with-http2  The  --with-privileged-ports  option can be added if such are desired.  If PostgreSQL access is needed:  brew reinstall apr-util --with-sqlite --with-postgresql  An optional  --with-openldap  enables LDAP support.  Then add the mod_swift tap and install ApacheExpress:  brew tap modswift/mod_swift\nbrew install apacheexpress  (yes, the account is just modswift w/o underscore due to GitHub limitations)", 
            "title": "Install on macOS using Homebrew"
        }, 
        {
            "location": "/install/#install-on-linux-or-macos-wo-homebrew", 
            "text": "On macOS: We strongly advise that you rather use Homebrew, more importantly\n          the Apache provided by Homebrew.  Ubuntu packages required (assuming you have Swift 3 installed already), this includes\nthe PostgreSQL and SQLite3 database adaptors, add additional ones as desired:  sudo apt-get update\nsudo apt-get install \\\n   curl pkg-config libapr1-dev libaprutil1-dev \\\n   libxml2 apache2 apache2-dev \\\n   libnghttp2-dev \\\n   libaprutil1-dbd-sqlite3 \\\n   libaprutil1-dbd-pgsql  Install mod_swift:  curl -L -o mod_swift.tgz \\\n     https://github.com/modswift/mod_swift/archive/0.8.5.tar.gz\ntar zxf mod_swift.tgz   cd mod_swift-0.8.5\nmake\nsudo make install  Install ApacheExpress:   WORK IN PROGRESS, STAY TUNED   curl -L -o apacheexpress.tgz \\\n     https://github.com/ApacheExpress/ApacheExpress/archive/TODO.tar.gz\ntar zxf apacheexpress.tgz   cd apacheexpress-TODO\nmake debug=yes\nmake debug=no\nsudo make debug=yes install\nsudo make debug=no  install  Those put things into  /usr/local . If you want to have it in  /usr , do:  sudo make prefix=/usr install", 
            "title": "Install on Linux (or macOS w/o Homebrew)"
        }, 
        {
            "location": "/install/#check-whether-the-installation-is-ok", 
            "text": "You can call  swift apache validate  to make sure the Apache installation is OK:  $ swift apache validate\nThe Swift Apache build environment looks sound.\n\nsrcroot:   /Users/helge/dev/Swift/Apex3\nmodule:    mods_Apex3\nconfig:    debug\nproduct:   /Users/helge/dev/Swift/Apex3/.build/mods_Apex3.so\napxs:      /usr/local/bin/apxs\nmod_swift: /usr/local\nswift:     3.1.0\ncert:      self-signed-mod_swift-localhost-server.crt\nhttp/2:    yes", 
            "title": "Check whether the installation is OK"
        }, 
        {
            "location": "/install/#troubleshooting", 
            "text": "If something isn't working in a Homebrew setup, check whether:  brew doctor  outputs anything unusual.  If you need any help, feel free to ask on the Mailing List \nor our Slack channel .", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/routing/", 
            "text": "Routing and Middleware\n\n\nThe Express framework has some nice tutorials on routing and middleware:\n\n\n\n\nRouting\n\n\nWriting middleware\n\n\nUsing middleware\n\n\n\n\n\n\nWORK IN PROGRESS, STAY TUNED\n\n\n\n\nMiddleware\n\n\n\n\nWORK IN PROGRESS, STAY TUNED\n\n\n\n\nBasic Routing\n\n\n\n\nWORK IN PROGRESS, STAY TUNED\n\n\n\n\nRouting with Parameters\n\n\n\n\nWORK IN PROGRESS, STAY TUNED\n\n\n\n\nModular Applications and Mounting\n\n\n\n\nWORK IN PROGRESS, STAY TUNED", 
            "title": "Routing & Middleware"
        }, 
        {
            "location": "/routing/#routing-and-middleware", 
            "text": "The Express framework has some nice tutorials on routing and middleware:   Routing  Writing middleware  Using middleware    WORK IN PROGRESS, STAY TUNED", 
            "title": "Routing and Middleware"
        }, 
        {
            "location": "/routing/#middleware", 
            "text": "WORK IN PROGRESS, STAY TUNED", 
            "title": "Middleware"
        }, 
        {
            "location": "/routing/#basic-routing", 
            "text": "WORK IN PROGRESS, STAY TUNED", 
            "title": "Basic Routing"
        }, 
        {
            "location": "/routing/#routing-with-parameters", 
            "text": "WORK IN PROGRESS, STAY TUNED", 
            "title": "Routing with Parameters"
        }, 
        {
            "location": "/routing/#modular-applications-and-mounting", 
            "text": "WORK IN PROGRESS, STAY TUNED", 
            "title": "Modular Applications and Mounting"
        }, 
        {
            "location": "/templates/", 
            "text": "Templates\n\n\n\n\nWORK IN PROGRESS, STAY TUNED\n\n\n\n\n\n\nMustache", 
            "title": "Templates"
        }, 
        {
            "location": "/templates/#templates", 
            "text": "WORK IN PROGRESS, STAY TUNED    Mustache", 
            "title": "Templates"
        }, 
        {
            "location": "/mod_dbd/", 
            "text": "Database Access\n\n\nA feature of Apache 2 known to few is\n\nmod_dbd\n.\nUsing that you can configure a SQL database connection within the \n\nApache.conf\n\nand use that within all your Apache modules/handlers.\nApache does proper and reliable pooling and connection management.\n\n\nApacheExpress comes with the \nmod_dbd\n middleware which hooks up the Swift\n\nZeeQL\n database access toolkit with Apache.\nZeeQL provides convenient low level database access as well as high level\nobject relation mapping feature.\nDatabase schemas can be provided directly\nfrom within Swift code,\nusing CoreData models,\nand you can even automatically generate them from existing databases using\nZeeQL's extensive schema reflection feature.\n\n\n\n\nWORK IN PROGRESS, STAY TUNED\n\n\n\n\nmod_dbd Configuration\n\n\nTo access a database from within Apache the database connection parameters\nneed to be configured in the Apache configuration.\nDepending on how the ApacheExpress application was prepared, \nthat may be already setup.\n\n\nIf not, the easiest way to do this is to use a mod_swift\n\nconfiguration template\n.\nIf there is none, simply create a file called \n$module-template.conf\n,\ne.g. \nmods_hellodb-template\n.conf.\nExample:\n\n\nLoadModule dbd_module %APACHE_MODULE_DIR%/mod_dbd.so\n\n\nIfModule dbd_module\n\n  DBDriver  sqlite3\n  DBDParams \n%SRCROOT%/data/MyDatabase.sqlite3\n\n\n/IfModule\n\n\n\n\n\nPostgreSQL example:\n\n\nIfModule dbd_module\n\n  DBDriver  pgsql\n  DBDParams \nhost=127.0.0.1 port=5432 dbname=OGo user=OGo password=OGo\n\n\n  # Connection Pool Management\n  DBDMin      1\n  DBDKeep     2\n  DBDMax     10\n  DBDExptime 60\n\n/IfModule\n\n\n\n\n\nIf you want to run PostgreSQL on Homebrew, make sure you have it installed,\ne.g.:\n\n\nbrew install apr-util --with-postgresql --with-sqlite\n\n\n\n\n\nWORK IN PROGRESS, STAY TUNED", 
            "title": "SQL Database Access"
        }, 
        {
            "location": "/mod_dbd/#database-access", 
            "text": "A feature of Apache 2 known to few is mod_dbd .\nUsing that you can configure a SQL database connection within the  Apache.conf \nand use that within all your Apache modules/handlers.\nApache does proper and reliable pooling and connection management.  ApacheExpress comes with the  mod_dbd  middleware which hooks up the Swift ZeeQL  database access toolkit with Apache.\nZeeQL provides convenient low level database access as well as high level\nobject relation mapping feature.\nDatabase schemas can be provided directly\nfrom within Swift code,\nusing CoreData models,\nand you can even automatically generate them from existing databases using\nZeeQL's extensive schema reflection feature.   WORK IN PROGRESS, STAY TUNED", 
            "title": "Database Access"
        }, 
        {
            "location": "/mod_dbd/#mod_dbd-configuration", 
            "text": "To access a database from within Apache the database connection parameters\nneed to be configured in the Apache configuration.\nDepending on how the ApacheExpress application was prepared, \nthat may be already setup.  If not, the easiest way to do this is to use a mod_swift configuration template .\nIf there is none, simply create a file called  $module-template.conf ,\ne.g.  mods_hellodb-template .conf.\nExample:  LoadModule dbd_module %APACHE_MODULE_DIR%/mod_dbd.so IfModule dbd_module \n  DBDriver  sqlite3\n  DBDParams  %SRCROOT%/data/MyDatabase.sqlite3  /IfModule   PostgreSQL example:  IfModule dbd_module \n  DBDriver  pgsql\n  DBDParams  host=127.0.0.1 port=5432 dbname=OGo user=OGo password=OGo \n\n  # Connection Pool Management\n  DBDMin      1\n  DBDKeep     2\n  DBDMax     10\n  DBDExptime 60 /IfModule   If you want to run PostgreSQL on Homebrew, make sure you have it installed,\ne.g.:  brew install apr-util --with-postgresql --with-sqlite   WORK IN PROGRESS, STAY TUNED", 
            "title": "mod_dbd Configuration"
        }, 
        {
            "location": "/http2/", 
            "text": "HTTP/2\n\n\nIf your server provides the \nmod_http2\n module, ApacheExpress will\nautomatically pick it up, configure a development SSL certificate and\nthe HTTP/2 module.\n\n\nCheck whether HTTP/2 is available\n\n\nTo check whether mod_swift did detect the HTTP/2 module successfully, you can\nrun:\n\n\n$ swift apache validate\nThe Swift Apache build environment looks sound.\n\n  srcroot:   /Users/helge/tmp/tests/mods_helloworld\n  module:    mods_helloworld\n  config:    debug\n  product:   /Users/helge/tmp/tests/mods_helloworld/.build/mods_helloworld.so\n  apxs:      /usr/local/bin/apxs\n  mod_swift: /usr/local/opt/mod_swift\n  swift:     3.0.2\n  cert:      self-signed-mod_swift-localhost-server.crt\n  http/2:    yes\n\n\n\n\nLook for the last line and check whether it says \nyes\n.\n\n\nInstall the Homebrew Apache w/ HTTP/2\n\n\nBefore you install mod_swift, we highly recommend that you install or reinstall\nthe Homebrew Apache w/ HTTP/2 and the MPM event module:\n\n\nbrew tap homebrew/apache\nbrew reinstall httpd24 --with-mpm-event --with-http2\n\n\n\nYou can also add \n--with-privileged-ports\n if you want to use such.\n\n\nUseful tools\n\n\nChrome Developer Tools\n\n\nYou can use the \nNetwork\n tab in the Chrome Developer Tools to check whether\nrequests are done using HTTP/2. Right click the table view and select\n'Protocol'.\n\n\ncurl w/ HTTP/2 support\n\n\nOn Homebrew you can easily install \ncurl\n with HTTP/2 support:\n\n\nbrew reinstall curl --with-nghttp2 --with-openssl\n\n\n\nIMPORTANT\n: curl is Cellar only w/ Homebrew. To invoke it either adjust your\n\nPATH\n to include \n/use/local/opt/curl/bin\n or invoke curl with the full path:\n\n\n/usr/local/opt/curl/bin/curl -v --insecure --http2 https://localhost:8442/hello\n\n\n\n\n(--insecure is needed if you use it w/ the self-signed certificate coming w/\n mod_swift)\n\n\nYou can scan the output of curl to see whether it is actually using HTTP/2:\n\n\n...\n* ALPN, offering h2\n* ALPN, offering http/1.1\n...\n* Using HTTP2, server supports multi-use\n* Connection state changed (HTTP/2 confirmed)\n...\n\n GET /hello HTTP/2\n...\n\n HTTP/2 200\n...\n\n\n\n\nLinks\n\n\n\n\nhow to h2 in apache", 
            "title": "HTTP/2"
        }, 
        {
            "location": "/http2/#http2", 
            "text": "If your server provides the  mod_http2  module, ApacheExpress will\nautomatically pick it up, configure a development SSL certificate and\nthe HTTP/2 module.", 
            "title": "HTTP/2"
        }, 
        {
            "location": "/http2/#check-whether-http2-is-available", 
            "text": "To check whether mod_swift did detect the HTTP/2 module successfully, you can\nrun:  $ swift apache validate\nThe Swift Apache build environment looks sound.\n\n  srcroot:   /Users/helge/tmp/tests/mods_helloworld\n  module:    mods_helloworld\n  config:    debug\n  product:   /Users/helge/tmp/tests/mods_helloworld/.build/mods_helloworld.so\n  apxs:      /usr/local/bin/apxs\n  mod_swift: /usr/local/opt/mod_swift\n  swift:     3.0.2\n  cert:      self-signed-mod_swift-localhost-server.crt\n  http/2:    yes  Look for the last line and check whether it says  yes .", 
            "title": "Check whether HTTP/2 is available"
        }, 
        {
            "location": "/http2/#install-the-homebrew-apache-w-http2", 
            "text": "Before you install mod_swift, we highly recommend that you install or reinstall\nthe Homebrew Apache w/ HTTP/2 and the MPM event module:  brew tap homebrew/apache\nbrew reinstall httpd24 --with-mpm-event --with-http2  You can also add  --with-privileged-ports  if you want to use such.", 
            "title": "Install the Homebrew Apache w/ HTTP/2"
        }, 
        {
            "location": "/http2/#useful-tools", 
            "text": "", 
            "title": "Useful tools"
        }, 
        {
            "location": "/http2/#chrome-developer-tools", 
            "text": "You can use the  Network  tab in the Chrome Developer Tools to check whether\nrequests are done using HTTP/2. Right click the table view and select\n'Protocol'.", 
            "title": "Chrome Developer Tools"
        }, 
        {
            "location": "/http2/#curl-w-http2-support", 
            "text": "On Homebrew you can easily install  curl  with HTTP/2 support:  brew reinstall curl --with-nghttp2 --with-openssl  IMPORTANT : curl is Cellar only w/ Homebrew. To invoke it either adjust your PATH  to include  /use/local/opt/curl/bin  or invoke curl with the full path:  /usr/local/opt/curl/bin/curl -v --insecure --http2 https://localhost:8442/hello  (--insecure is needed if you use it w/ the self-signed certificate coming w/\n mod_swift)  You can scan the output of curl to see whether it is actually using HTTP/2:  ...\n* ALPN, offering h2\n* ALPN, offering http/1.1\n...\n* Using HTTP2, server supports multi-use\n* Connection state changed (HTTP/2 confirmed)\n...  GET /hello HTTP/2\n...  HTTP/2 200\n...", 
            "title": "curl w/ HTTP/2 support"
        }, 
        {
            "location": "/http2/#links", 
            "text": "how to h2 in apache", 
            "title": "Links"
        }, 
        {
            "location": "/about/", 
            "text": "Apache modules in Swift\n.\n\n\nContact\n\n\nHey, we love feedback. Join the mailing list, Slack channel or just drop us\nan email to tell us why this is crap (or not?).\n\n\n\n\nMailing List\n\n\nSlack\n\n\ninfo@mod-swift.org\n\n\n\n\nMkDocs\n\n\nBuilt with \nMkDocs\n \nusing a \ntheme\n \nprovided by \nRead the Docs\n.\n\n\nWho\n\n\nApacheExpress is brought to you by the\n\nZeeZide\n GmbH.\n\nImprint\n.", 
            "title": "About"
        }, 
        {
            "location": "/about/#contact", 
            "text": "Hey, we love feedback. Join the mailing list, Slack channel or just drop us\nan email to tell us why this is crap (or not?).   Mailing List  Slack  info@mod-swift.org", 
            "title": "Contact"
        }, 
        {
            "location": "/about/#mkdocs", 
            "text": "Built with  MkDocs  \nusing a  theme  \nprovided by  Read the Docs .", 
            "title": "MkDocs"
        }, 
        {
            "location": "/about/#who", 
            "text": "ApacheExpress is brought to you by the ZeeZide  GmbH. Imprint .", 
            "title": "Who"
        }
    ]
}