{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ApacheExpress ApacheExpress is a way to rapidly write reliable and feature rich web applications in the Swift programming language. Without ever leaving Xcode, or using the Swift Package Manager environment on Linux. ApacheExpress applications run directly within the Apache WebServer , as native Apache modules - without any interpreters or proxies. Server Side Swift the right way. ApacheExpress can be used alongside any other Apache module and hence can exploit the proven functionality of Apache. This includes pretty much any kind of authentication mechanism you can think of, rate limiting / anti-DoS modules, or mod_ssl to secure the web application as well as mod_h2 to provide HTTP/2 support . The latter are preconfigured when running ApacheExpress modules and provide full HTTP/2 access out of the box. Simple Example Developing ApacheExpress applications use a Swift version of the mechanisms and APIs used by the Express framework. Hence its name. Example: let app = apache.express(cookieParser(), session()) app.get(\"/express/cookies\") { req, res, _ in try res.json(req.cookies) } app.get(\"/express/\") { req, res, _ in let values = [ \"viewCount\" : req.session[\"viewCount\"] ?? 0, \"cowOfTheDay\" : cows.vaca() ] try res.render(\"index\", values) } It grabs the application object representing the module, configures two builtin middleware objects ( cookieParser , session ) and then registers two routes . The middleware attached to the /express/cookies route simply extracts all HTTP cookies set in the request and returns them as JSON. The other sets up a dictionary which is then rendered using a Mustache template . Database Access To provide access to a collection of SQL databases, including PostgreSQL and SQLite3, ApacheExpress uses the Apache mod_dbd module. Apache is used to configure the database connection and Apache is maintaining the database connection pool. ApacheExpress then provides the mod_dbd middleware, which stacks the powerful ZeeQL database access framework on top of Apache's module. WORK IN PROGRESS, STAY TUNED ApacheExpress is still being prepared. Please stay tuned for the release. If you want to stay up to date, subscribe to the blog on: apacheexpress.io/blog/ .","title":"Introduction"},{"location":"#apacheexpress","text":"ApacheExpress is a way to rapidly write reliable and feature rich web applications in the Swift programming language. Without ever leaving Xcode, or using the Swift Package Manager environment on Linux. ApacheExpress applications run directly within the Apache WebServer , as native Apache modules - without any interpreters or proxies. Server Side Swift the right way. ApacheExpress can be used alongside any other Apache module and hence can exploit the proven functionality of Apache. This includes pretty much any kind of authentication mechanism you can think of, rate limiting / anti-DoS modules, or mod_ssl to secure the web application as well as mod_h2 to provide HTTP/2 support . The latter are preconfigured when running ApacheExpress modules and provide full HTTP/2 access out of the box.","title":"ApacheExpress"},{"location":"#simple-example","text":"Developing ApacheExpress applications use a Swift version of the mechanisms and APIs used by the Express framework. Hence its name. Example: let app = apache.express(cookieParser(), session()) app.get(\"/express/cookies\") { req, res, _ in try res.json(req.cookies) } app.get(\"/express/\") { req, res, _ in let values = [ \"viewCount\" : req.session[\"viewCount\"] ?? 0, \"cowOfTheDay\" : cows.vaca() ] try res.render(\"index\", values) } It grabs the application object representing the module, configures two builtin middleware objects ( cookieParser , session ) and then registers two routes . The middleware attached to the /express/cookies route simply extracts all HTTP cookies set in the request and returns them as JSON. The other sets up a dictionary which is then rendered using a Mustache template .","title":"Simple Example"},{"location":"#database-access","text":"To provide access to a collection of SQL databases, including PostgreSQL and SQLite3, ApacheExpress uses the Apache mod_dbd module. Apache is used to configure the database connection and Apache is maintaining the database connection pool. ApacheExpress then provides the mod_dbd middleware, which stacks the powerful ZeeQL database access framework on top of Apache's module.","title":"Database Access"},{"location":"#work-in-progress-stay-tuned","text":"ApacheExpress is still being prepared. Please stay tuned for the release. If you want to stay up to date, subscribe to the blog on: apacheexpress.io/blog/ .","title":"WORK IN PROGRESS, STAY TUNED"},{"location":"about/","text":"Apache modules in Swift . Contact Hey, we love feedback. Join the mailing list, Slack channel or just drop us an email to tell us why this is crap (or not?). Mailing List Slack info@mod-swift.org MkDocs Built with MkDocs using a theme provided by Read the Docs . Who ApacheExpress is brought to you by the ZeeZide GmbH. Imprint .","title":"About"},{"location":"about/#contact","text":"Hey, we love feedback. Join the mailing list, Slack channel or just drop us an email to tell us why this is crap (or not?). Mailing List Slack info@mod-swift.org","title":"Contact"},{"location":"about/#mkdocs","text":"Built with MkDocs using a theme provided by Read the Docs .","title":"MkDocs"},{"location":"about/#who","text":"ApacheExpress is brought to you by the ZeeZide GmbH. Imprint .","title":"Who"},{"location":"http2/","text":"HTTP/2 If your server provides the mod_http2 module, ApacheExpress will automatically pick it up, configure a development SSL certificate and the HTTP/2 module. UPDATE 2020-12-27: The Homebrew Apache doesn't seem to support the --with-http2 option anymore. HTTP/2 may now require a regular Apache installation from source. Check whether HTTP/2 is available To check whether mod_swift did detect the HTTP/2 module successfully, you can run: $ swift apache validate swift-driver version: 1.45.2 The Swift Apache build environment looks sound. srcroot: /Users/helge/tmp/mods_helloworld module: mods_helloworld config: debug product: /Users/helge/tmp/mods_helloworld/.build/mods_helloworld.so apxs: /opt/homebrew/bin/apxs moddir: /opt/homebrew/lib/httpd/modules relmoddir: / mod_swift: /opt/homebrew/opt/mod_swift swift: 5.6.0 cert: self-signed-mod_swift-localhost-server.crt http/2: yes Look for the last line and check whether it says yes . Useful tools Chrome Developer Tools You can use the Network tab in the Chrome Developer Tools to check whether requests are done using HTTP/2. Right click the table view and select 'Protocol'. curl w/ HTTP/2 support The system curl now comes with HTTP/2 support by default on macOS 12. curl -v --insecure --http2 https://localhost:8442/hello (--insecure is needed if you use it w/ the self-signed certificate coming w/ mod_swift) You can scan the output of curl to see whether it is actually using HTTP/2: ... * ALPN, offering h2 * ALPN, offering http/1.1 ... * Using HTTP2, server supports multi-use * Connection state changed (HTTP/2 confirmed) ... > GET /hello HTTP/2 ... < HTTP/2 200 ... Links how to h2 in apache","title":"HTTP/2"},{"location":"http2/#http2","text":"If your server provides the mod_http2 module, ApacheExpress will automatically pick it up, configure a development SSL certificate and the HTTP/2 module. UPDATE 2020-12-27: The Homebrew Apache doesn't seem to support the --with-http2 option anymore. HTTP/2 may now require a regular Apache installation from source.","title":"HTTP/2"},{"location":"http2/#check-whether-http2-is-available","text":"To check whether mod_swift did detect the HTTP/2 module successfully, you can run: $ swift apache validate swift-driver version: 1.45.2 The Swift Apache build environment looks sound. srcroot: /Users/helge/tmp/mods_helloworld module: mods_helloworld config: debug product: /Users/helge/tmp/mods_helloworld/.build/mods_helloworld.so apxs: /opt/homebrew/bin/apxs moddir: /opt/homebrew/lib/httpd/modules relmoddir: / mod_swift: /opt/homebrew/opt/mod_swift swift: 5.6.0 cert: self-signed-mod_swift-localhost-server.crt http/2: yes Look for the last line and check whether it says yes .","title":"Check whether HTTP/2 is available"},{"location":"http2/#useful-tools","text":"","title":"Useful tools"},{"location":"http2/#chrome-developer-tools","text":"You can use the Network tab in the Chrome Developer Tools to check whether requests are done using HTTP/2. Right click the table view and select 'Protocol'.","title":"Chrome Developer Tools"},{"location":"http2/#curl-w-http2-support","text":"The system curl now comes with HTTP/2 support by default on macOS 12. curl -v --insecure --http2 https://localhost:8442/hello (--insecure is needed if you use it w/ the self-signed certificate coming w/ mod_swift) You can scan the output of curl to see whether it is actually using HTTP/2: ... * ALPN, offering h2 * ALPN, offering http/1.1 ... * Using HTTP2, server supports multi-use * Connection state changed (HTTP/2 confirmed) ... > GET /hello HTTP/2 ... < HTTP/2 200 ...","title":"curl w/ HTTP/2 support"},{"location":"http2/#links","text":"how to h2 in apache","title":"Links"},{"location":"install/","text":"Installation ApacheExpress should install fine on pretty much any Unix system that can run Swift and Apache 2.4. Including exotic setups like Raspberry Pi systems. We also provide a macOS Homebrew tap which makes it really easy to install ApacheExpress and its dependencies on macOS. We highly recommend that over a custom install. On the Linux side we test w/ Ubuntu Trusty and Xenial, though it should work pretty much anywhere. Install on macOS using Homebrew Got no Homebrew? Get it! UPDATE 2020-12-27: The Homebrew Apache doesn't seem to support the --with-http2 and --with-mpm-event options anymore. Same for --with-sqlite and --with-postgresql . Before installing ApacheExpress and mod_swift, it is strongly recommended that the Homebrew Apache 2.4 with HTTP/2 and the MPM event module is (re)installed: brew reinstall httpd --with-mpm-event --with-http2 The --with-privileged-ports option can be added if such are desired. If PostgreSQL access is needed: brew reinstall apr-util --with-sqlite --with-postgresql An optional --with-openldap enables LDAP support. Then add the mod_swift tap and install ApacheExpress: brew tap modswift/mod_swift brew install apacheexpress (yes, the account is just modswift w/o underscore due to GitHub limitations) Install on Linux (or macOS w/o Homebrew) On macOS: We strongly advise that you rather use Homebrew, more importantly the Apache provided by Homebrew. Ubuntu packages required (assuming you have Swift 3 installed already), this includes the PostgreSQL and SQLite3 database adaptors, add additional ones as desired: sudo apt-get update sudo apt-get install \\ curl pkg-config libapr1-dev libaprutil1-dev \\ libxml2 apache2 apache2-dev \\ libnghttp2-dev \\ libaprutil1-dbd-sqlite3 \\ libaprutil1-dbd-pgsql Install mod_swift: curl -L -o mod_swift.tgz \\ https://github.com/modswift/mod_swift/archive/0.8.5.tar.gz tar zxf mod_swift.tgz && cd mod_swift-0.8.5 make sudo make install Install ApacheExpress: WORK IN PROGRESS, STAY TUNED curl -L -o apacheexpress.tgz \\ https://github.com/ApacheExpress/ApacheExpress/archive/TODO.tar.gz tar zxf apacheexpress.tgz && cd apacheexpress-TODO make debug=yes make debug=no sudo make debug=yes install sudo make debug=no install Those put things into /usr/local . If you want to have it in /usr , do: sudo make prefix=/usr install Check whether the installation is OK You can call swift apache validate to make sure the Apache installation is OK: $ swift apache validate The Swift Apache build environment looks sound. srcroot: /Users/helge/dev/Swift/Apex3 module: mods_Apex3 config: debug product: /Users/helge/dev/Swift/Apex3/.build/mods_Apex3.so apxs: /usr/local/bin/apxs mod_swift: /usr/local swift: 3.1.0 cert: self-signed-mod_swift-localhost-server.crt http/2: yes Troubleshooting If something isn't working in a Homebrew setup, check whether: brew doctor outputs anything unusual. If you need any help, feel free to ask on the Mailing List or our Slack channel .","title":"Installation"},{"location":"install/#installation","text":"ApacheExpress should install fine on pretty much any Unix system that can run Swift and Apache 2.4. Including exotic setups like Raspberry Pi systems. We also provide a macOS Homebrew tap which makes it really easy to install ApacheExpress and its dependencies on macOS. We highly recommend that over a custom install. On the Linux side we test w/ Ubuntu Trusty and Xenial, though it should work pretty much anywhere.","title":"Installation"},{"location":"install/#install-on-macos-using-homebrew","text":"Got no Homebrew? Get it! UPDATE 2020-12-27: The Homebrew Apache doesn't seem to support the --with-http2 and --with-mpm-event options anymore. Same for --with-sqlite and --with-postgresql . Before installing ApacheExpress and mod_swift, it is strongly recommended that the Homebrew Apache 2.4 with HTTP/2 and the MPM event module is (re)installed: brew reinstall httpd --with-mpm-event --with-http2 The --with-privileged-ports option can be added if such are desired. If PostgreSQL access is needed: brew reinstall apr-util --with-sqlite --with-postgresql An optional --with-openldap enables LDAP support. Then add the mod_swift tap and install ApacheExpress: brew tap modswift/mod_swift brew install apacheexpress (yes, the account is just modswift w/o underscore due to GitHub limitations)","title":"Install on macOS using Homebrew"},{"location":"install/#install-on-linux-or-macos-wo-homebrew","text":"On macOS: We strongly advise that you rather use Homebrew, more importantly the Apache provided by Homebrew. Ubuntu packages required (assuming you have Swift 3 installed already), this includes the PostgreSQL and SQLite3 database adaptors, add additional ones as desired: sudo apt-get update sudo apt-get install \\ curl pkg-config libapr1-dev libaprutil1-dev \\ libxml2 apache2 apache2-dev \\ libnghttp2-dev \\ libaprutil1-dbd-sqlite3 \\ libaprutil1-dbd-pgsql Install mod_swift: curl -L -o mod_swift.tgz \\ https://github.com/modswift/mod_swift/archive/0.8.5.tar.gz tar zxf mod_swift.tgz && cd mod_swift-0.8.5 make sudo make install Install ApacheExpress: WORK IN PROGRESS, STAY TUNED curl -L -o apacheexpress.tgz \\ https://github.com/ApacheExpress/ApacheExpress/archive/TODO.tar.gz tar zxf apacheexpress.tgz && cd apacheexpress-TODO make debug=yes make debug=no sudo make debug=yes install sudo make debug=no install Those put things into /usr/local . If you want to have it in /usr , do: sudo make prefix=/usr install","title":"Install on Linux (or macOS w/o Homebrew)"},{"location":"install/#check-whether-the-installation-is-ok","text":"You can call swift apache validate to make sure the Apache installation is OK: $ swift apache validate The Swift Apache build environment looks sound. srcroot: /Users/helge/dev/Swift/Apex3 module: mods_Apex3 config: debug product: /Users/helge/dev/Swift/Apex3/.build/mods_Apex3.so apxs: /usr/local/bin/apxs mod_swift: /usr/local swift: 3.1.0 cert: self-signed-mod_swift-localhost-server.crt http/2: yes","title":"Check whether the installation is OK"},{"location":"install/#troubleshooting","text":"If something isn't working in a Homebrew setup, check whether: brew doctor outputs anything unusual. If you need any help, feel free to ask on the Mailing List or our Slack channel .","title":"Troubleshooting"},{"location":"mod_dbd/","text":"Database Access A feature of Apache 2 known to few is mod_dbd . Using that you can configure a SQL database connection within the Apache.conf and use that within all your Apache modules/handlers. Apache does proper and reliable pooling and connection management. ApacheExpress comes with the mod_dbd middleware which hooks up the Swift ZeeQL database access toolkit with Apache. ZeeQL provides convenient low level database access as well as high level object relation mapping feature. Database schemas can be provided directly from within Swift code, using CoreData models, and you can even automatically generate them from existing databases using ZeeQL's extensive schema reflection feature. WORK IN PROGRESS, STAY TUNED mod_dbd Configuration To access a database from within Apache the database connection parameters need to be configured in the Apache configuration. Depending on how the ApacheExpress application was prepared, that may be already setup. If not, the easiest way to do this is to use a mod_swift configuration template . If there is none, simply create a file called $module-template.conf , e.g. mods_hellodb-template .conf. Example: LoadModule dbd_module %APACHE_MODULE_DIR%/mod_dbd.so <IfModule dbd_module> DBDriver sqlite3 DBDParams \"%SRCROOT%/data/MyDatabase.sqlite3\" </IfModule> PostgreSQL example: <IfModule dbd_module> DBDriver pgsql DBDParams \"host=127.0.0.1 port=5432 dbname=OGo user=OGo password=OGo\" # Connection Pool Management DBDMin 1 DBDKeep 2 DBDMax 10 DBDExptime 60 </IfModule> If you want to run PostgreSQL on Homebrew, make sure you have it installed, e.g.: brew install apr-util --with-postgresql --with-sqlite WORK IN PROGRESS, STAY TUNED","title":"SQL Database Access"},{"location":"mod_dbd/#database-access","text":"A feature of Apache 2 known to few is mod_dbd . Using that you can configure a SQL database connection within the Apache.conf and use that within all your Apache modules/handlers. Apache does proper and reliable pooling and connection management. ApacheExpress comes with the mod_dbd middleware which hooks up the Swift ZeeQL database access toolkit with Apache. ZeeQL provides convenient low level database access as well as high level object relation mapping feature. Database schemas can be provided directly from within Swift code, using CoreData models, and you can even automatically generate them from existing databases using ZeeQL's extensive schema reflection feature. WORK IN PROGRESS, STAY TUNED","title":"Database Access"},{"location":"mod_dbd/#mod_dbd-configuration","text":"To access a database from within Apache the database connection parameters need to be configured in the Apache configuration. Depending on how the ApacheExpress application was prepared, that may be already setup. If not, the easiest way to do this is to use a mod_swift configuration template . If there is none, simply create a file called $module-template.conf , e.g. mods_hellodb-template .conf. Example: LoadModule dbd_module %APACHE_MODULE_DIR%/mod_dbd.so <IfModule dbd_module> DBDriver sqlite3 DBDParams \"%SRCROOT%/data/MyDatabase.sqlite3\" </IfModule> PostgreSQL example: <IfModule dbd_module> DBDriver pgsql DBDParams \"host=127.0.0.1 port=5432 dbname=OGo user=OGo password=OGo\" # Connection Pool Management DBDMin 1 DBDKeep 2 DBDMax 10 DBDExptime 60 </IfModule> If you want to run PostgreSQL on Homebrew, make sure you have it installed, e.g.: brew install apr-util --with-postgresql --with-sqlite WORK IN PROGRESS, STAY TUNED","title":"mod_dbd Configuration"},{"location":"routing/","text":"Routing and Middleware The Express framework has some nice tutorials on routing and middleware: Routing Writing middleware Using middleware WORK IN PROGRESS, STAY TUNED Middleware WORK IN PROGRESS, STAY TUNED Basic Routing WORK IN PROGRESS, STAY TUNED Routing with Parameters WORK IN PROGRESS, STAY TUNED Modular Applications and Mounting WORK IN PROGRESS, STAY TUNED","title":"Routing & Middleware"},{"location":"routing/#routing-and-middleware","text":"The Express framework has some nice tutorials on routing and middleware: Routing Writing middleware Using middleware WORK IN PROGRESS, STAY TUNED","title":"Routing and Middleware"},{"location":"routing/#middleware","text":"WORK IN PROGRESS, STAY TUNED","title":"Middleware"},{"location":"routing/#basic-routing","text":"WORK IN PROGRESS, STAY TUNED","title":"Basic Routing"},{"location":"routing/#routing-with-parameters","text":"WORK IN PROGRESS, STAY TUNED","title":"Routing with Parameters"},{"location":"routing/#modular-applications-and-mounting","text":"WORK IN PROGRESS, STAY TUNED","title":"Modular Applications and Mounting"},{"location":"templates/","text":"Templates WORK IN PROGRESS, STAY TUNED Mustache","title":"Templates"},{"location":"templates/#templates","text":"WORK IN PROGRESS, STAY TUNED Mustache","title":"Templates"}]}